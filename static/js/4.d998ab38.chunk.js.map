{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/AuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Messages/Messages.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","DialogItem","props","path","id","className","s","dialog","to","name","Messages","message","maxLength10","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsArray","dialogsPage","dialogs","map","elem","key","messagesArray","messages","dialogsItems","value","addMessage","newMessageText","DialogsContainer","this","React","Component","compose","connect","dispatch","addMessageCreator","RedirectComponent"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,2GCG/MC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,S,mCCKRE,EAPI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OAAQ,yBAAKC,UAAWC,IAAEC,QACtB,kBAAC,IAAD,CAASC,GAAIL,GAAOD,EAAMO,QCCnBC,EAJE,SAACR,GACd,OAAQ,yBAAKG,UAAWC,IAAEC,QAASL,EAAMS,U,iCC0BxCC,EAAcC,YAAiB,IAO9BC,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,EANL,SAACb,GACpB,OAAO,0BAAMe,SAAUf,EAAMgB,cACzB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAASX,GAAcH,KAAK,iBAAiBe,YAAY,4DAChG,mDAKOC,EA9BC,SAACvB,GAGb,IAGQwB,EAAexB,EAAMyB,YAAYC,QAAQC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAYrB,KAAMqB,EAAKrB,KAAML,GAAI0B,EAAK1B,GAAI2B,IAAKD,EAAK1B,QACzG4B,EAAgB9B,EAAMyB,YAAYM,SAASJ,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAUnB,QAASmB,EAAKnB,QAASoB,IAAKD,EAAK1B,QAEtG,OAAO,yBAAKC,UAAWC,IAAEsB,SACrB,yBAAKvB,UAAWC,IAAE4B,cACbR,GAEL,yBAAKrB,UAAWC,IAAE2B,UACbD,EACD,kBAAClB,EAAD,CAAqBG,SAZd,SAACkB,GAChBjC,EAAMkC,WAAWD,EAAME,sB,QCJzBC,E,uKAEE,OAAO,kBAAC,EAAYC,KAAKrC,W,GAFFsC,IAAMC,WAkBtBC,4BACXC,aAbkB,SAAC7C,GACnB,MAAO,CACH6B,YAAa7B,EAAM6B,YACnBU,eAAgBvC,EAAM6B,YAAYU,mBAGjB,SAACO,GACtB,MAAO,CACHR,WAAY,SAACC,GAAqBO,EAASC,YAAkBR,UJfrC,SAACI,GAAe,IAEtCK,EAFqC,uKAInC,OAAKP,KAAKrC,MAAMH,OACT,kBAAC0C,EAAcF,KAAKrC,OADI,kBAAC,IAAD,CAAUM,GAAI,eAJV,GAEXgC,IAAMC,WAQtC,OADqCE,YAAQ9C,EAAR8C,CAAoCG,KIU9DJ,CAGbJ","file":"static/js/4.d998ab38.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__A1-2Y\",\"dialogsItems\":\"Dialogs_dialogsItems__1Lo7S\",\"active\":\"Dialogs_active__1sb8b\",\"dialog\":\"Dialogs_dialog__dr705\",\"messages\":\"Dialogs_messages__27ifQ\",\"message\":\"Dialogs_message__3yuL5\"};","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'} />\r\n            return <Component {...this.props} />\r\n        }\r\n\r\n    }\r\n    let connectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return connectedAuthRedirectComponent\r\n}","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (<div className={s.dialog}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>)\r\n}\r\n\r\nexport default DialogItem;","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\n\r\nconst Messages = (props) => {\r\n    return (<div className={s.dialog}>{props.message}</div>)\r\n}\r\n\r\nexport default Messages;","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Messages from './Messages/Messages'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport {Textarea} from '../Common/FormsControls/FormsControls'\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators'\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n \r\n    const addMessage = (value) => {\r\n        props.addMessage(value.newMessageText)\r\n    }\r\n        let dialogsArray = props.dialogsPage.dialogs.map(elem => <DialogItem name={elem.name} id={elem.id} key={elem.id} />)\r\n        let messagesArray = props.dialogsPage.messages.map(elem => <Messages message={elem.message} key={elem.id} />)\r\n\r\n        return <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsArray}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesArray}\r\n                <AddMessageFormRedux onSubmit={addMessage} />\r\n            </div>\r\n        </div>\r\n\r\n\r\n}\r\n let maxLength10 = maxLengthCreator(10)\r\nconst AddMessageForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea} validate={[required,maxLength10]} name='newMessageText' placeholder=\"введи шось\" /> \r\n        <button >Add Message</button>\r\n    </form>\r\n}\r\nconst AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from 'react'\r\nimport { withAuthRedirect } from '../../hoc/AuthRedirect'\r\n\r\nimport { addMessageCreator } from '../../redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\n\r\nclass DialogsContainer extends React.Component {\r\n    render() {\r\n        return <Dialogs {...this.props} />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        newMessageText: state.dialogsPage.newMessageText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (newMessageText) => { dispatch(addMessageCreator(newMessageText)) }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(DialogsContainer)"],"sourceRoot":""}